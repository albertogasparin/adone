// @flow
/* eslint-disable no-redeclare */

import type { Node } from 'react';

/**
 * ST: Full basket state
 * PI: Picked basket state (or result)
 * AC: Basket actions
 */

type Produce<ST> = (modifier: (ST) => ST | void) => void;
type GetState<ST> = () => $ReadOnly<ST>;
type BasketStoreUnsubscribe = () => void;

type YieldRenderPropFunction<S, A> = ($Exact<$ReadOnly<S>> & $Exact<A>) => Node;

export type Basket<ST, AC> = {|
  key: string,
  defaultState: ST,
  actions: AC,
|};

export type BasketStore<ST> = {|
  getState: GetState<ST>,
  setState: ST => void,
  key: string,
  subscribe: (listener: () => void) => BasketStoreUnsubscribe,
  produce: Produce<ST>,
|};

export type BasketAction<ST, EX = *> = (
  produce: Produce<ST>,
  getState: GetState<ST>,
  extraArg: EX
) => *;

export type BasketInstance<ST, AC> = {
  store: BasketStore<ST>,
  actions: AC,
};

declare export class Registry {
  configure: ({
    initialStates: { [key: string]: Object },
    actionExtraArgument: any,
  }) => void;
  baskets: Map<string, BasketInstance<any, any>>;
  initBasket: <ST, AC>(key: string, Basket<ST, AC>) => BasketInstance<ST, AC>;
  getBasket: <ST, AC>(
    Basket<ST, AC>,
    scopeId: string
  ) => BasketInstance<ST, AC>;
  deleteBasket: <ST, AC>(Basket<ST, AC>, scopeId: string) => void;
}

declare export var defaultRegistry: Registry;

declare export class Yield<ST, AC, PI> extends React$Component<
  | {|
      children: YieldRenderPropFunction<ST, AC>,
      from: Basket<ST, AC>,
      withProps?: {},
    |}
  | {|
      children: YieldRenderPropFunction<PI, AC>,
      from: Basket<ST, AC>,
      pick: ST => PI,
      withProps?: {},
    |}
  | {|
      children: YieldRenderPropFunction<{||}, AC>,
      from: Basket<ST, AC>,
      pick: null,
      withProps?: {},
    |}
> {
  basket: BasketInstance<ST, AC>;
}

declare export class YieldScope extends React$Component<
  | {
      id: string,
      for: Basket<*, *> | Basket<*, *>[],
      local?: false,
    }
  | {
      id?: string,
      for: Basket<*, *> | Basket<*, *>[],
      local: true,
    },
  {
    globalRegistry: Registry,
    getBasket: $PropertyType<Registry, 'getBasket'>,
  }
> {
  registry: Registry;
}

declare export class YieldProvider extends React$Component<
  {
    initialStates?: {},
    actionExtraArgument?: any,
  },
  {
    globalRegistry: Registry,
    getBasket: $PropertyType<Registry, 'getBasket'>,
  }
> {
  registry: Registry;
}

type MiddlewareResult = { changes: any[] };
export type Middleware = (
  store: BasketStore<any>
) => (next: (fn: any) => MiddlewareResult) => (fn: () => *) => MiddlewareResult;

declare export var defaults: {
  devtools: boolean,
  middlewares: Set<Middleware>,
};

declare export function createYield<ST, AC>(
  from: Basket<ST, AC>
): React$ComponentType<{ children: YieldRenderPropFunction<ST, AC> }>;

declare export function createYield<ST, AC>(
  name: string,
  from: Basket<ST, AC>
): React$ComponentType<{ children: YieldRenderPropFunction<ST, AC> }>;

declare export function createYield<ST, AC, PI>(
  from: Basket<ST, AC>,
  pick: (ST) => PI
): React$ComponentType<{ children: YieldRenderPropFunction<PI, AC> }>;

declare export function createYield<ST, AC, PI>(
  from: Basket<ST, AC>,
  pick: null
): React$ComponentType<{ children: YieldRenderPropFunction<{||}, AC> }>;

declare export function createYield<ST, AC, PI>(
  name: string,
  from: Basket<ST, AC>,
  pick: (ST) => PI
): React$ComponentType<{ children: YieldRenderPropFunction<PI, AC> }>;

declare export function createYield<ST, AC, PI>(
  name: string,
  from: Basket<ST, AC>,
  pick: null
): React$ComponentType<{ children: YieldRenderPropFunction<{||}, AC> }>;
