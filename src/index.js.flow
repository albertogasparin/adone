// @flow
/* eslint-disable no-redeclare */

import type { Node } from 'react';

/**
 * ST: Full basket state
 * PI: Picked basket state (or result)
 * AC: Basket actions
 */

type SetState<ST> = ($Shape<ST>) => void;
type GetState<ST> = () => $ReadOnly<ST>;
type BasketStoreUnsubscribe = () => void;

type YieldRenderPropFunction<S, A> = ($Exact<$ReadOnly<S>> & $Exact<A>) => Node;

export type Basket<ST, AC> = {|
  key: string[],
  defaultState: ST,
  actions: AC,
|};

export type BasketStore<ST> = {|
  getState: GetState<ST>,
  setState: ST => void,
  key: string[],
  subscribe: (listener: () => void) => BasketStoreUnsubscribe,
  mutator: SetState<ST>,
|};

export type BasketAction<ST, EX = *> = (
  setState: SetState<ST>,
  getState: GetState<ST>,
  extraArg: EX
) => *;

export type BasketInstance<ST, AC> = {
  store: BasketStore<ST>,
  actions: AC,
};

declare export class Registry {
  configure: ({
    initialStates: { [key: string]: Object },
    actionExtraArgument: any,
  }) => void;
  baskets: Map<string, BasketInstance<any, any>>;
  initBasket: <ST, AC>(key: string, Basket<ST, AC>) => BasketInstance<ST, AC>;
  getBasket: <ST, AC>(
    Basket<ST, AC>,
    scopeId: string
  ) => BasketInstance<ST, AC>;
  deleteBasket: <ST, AC>(Basket<ST, AC>, scopeId: string) => void;
}

declare export var defaultRegistry: Registry;

declare export class AdoneProvider extends React$Component<
  {
    initialStates?: {},
    actionExtraArgument?: any,
  },
  {
    globalRegistry: Registry,
    getBasket: $PropertyType<Registry, 'getBasket'>,
  }
> {
  registry: Registry;
}

type MiddlewareResult = any;
export type Middleware = (
  store: BasketStore<any>
) => (next: (fn: any) => MiddlewareResult) => (fn: () => *) => MiddlewareResult;

declare export var defaults: {
  devtools: boolean,
  middlewares: Set<Middleware>,
  mutator: <ST>(prevState: ST, partialState: *) => ST,
};

declare export function createComponents<ST, AC>({
  defaultState: ST,
  actions: AC,
  name?: string,
}): {
  Subscriber: React$ComponentType<{
    children: YieldRenderPropFunction<ST, AC>,
  }>,
  Scope: React$ComponentType<{ id?: string }>,
};

declare export function createSelector<ST, AC, SE>(
  Subscriber: React$ComponentType<{
    children: YieldRenderPropFunction<ST, AC>,
  }>,
  selector: (ST) => SE,
  displayName?: string
): React$ComponentType<{ children: YieldRenderPropFunction<SE, AC> }>;
